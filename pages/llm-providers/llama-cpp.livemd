<!-- livebook:{"persist_outputs":true} -->

# Local Instructor w/ llama.cpp

```elixir
Mix.install(
  [
    {:instructor, path: Path.expand("../../", __DIR__)},
    {:kino_shell, "~> 0.1.2"}
  ],
  config: [
    instructor: [
      adapter: Instructor.Adapters.Llamacpp,
      llamacpp: [
        chat_template: :chat_ml
      ]
    ]
  ]
)
```

## Setting up llama.cpp

The open source community has been hard at work trying to dethrone OpenAI. It turns out today there are hundreds of models that you can download on HuggingFace and run locally on your machine if you have the right hardware. One of the main ways to run these models locally is through the great project [llama.cpp](https://github.com/ggerganov/llama.cpp). You'd be surprised what a standard Macbook/Linux machine can actually run.

Instructor is designed in a way where you can swap out the provider of the LLM. Internally, it's just implemented with behavior. You can customize it by changing the configuration. In fact, look at the `Mix.install` of this live book to see how that's done.

<!-- livebook:{"force_markdown":true} -->

```elixir
config :instructor, adapter: Instructor.Adapters.Llamacpp
config :instructor, llamacpp: [chat_template: :mistral_instruct]
```

As of today, instructor doesn't actually run the LLM inside the BEAM. Instead, it calls out to a locally running web server that is part of the llama.cpp project. Luckily installation and configuration is easy.

Somewhere on your machine clone the Lama.CPP repo and just run make,

<!-- livebook:{"attrs":"eyJpbl9iYWNrZ3JvdW5kIjpmYWxzZSwicmVzdGFydCI6ZmFsc2UsInNvdXJjZSI6IiMgY2QgL1VzZXJzL3Rob21hcy9jb2RlL2xsYW1hLmNwcFxuIyBtYWtlIn0","chunks":null,"kind":"Elixir.KinoShell.ShellScriptCell","livebook_object":"smart_cell"} -->

```elixir
{_, 0} =
  System.cmd(
    "bash",
    [
      "-lc",
      """
      # cd /Users/thomas/code/llama.cpp
      # make
      """
    ],
    into: IO.stream()
  )

:ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

Next, we need to actually download a model to run. One important thing to note is that llama.cpp only runs models in the GGUF file format. However, there is a great active open source community that is constantly porting the new models over to this format. Anytime you're looking for a model to run, just Google the name of the model then GGUF, and you'll usually get a result from some fellow named [TheBloke](https://huggingface.co/TheBloke).

On a fairly modest machine, you should be able to run a 7B model that is quantitized. For our example, we're going to run [mistral-7b-instruct-v0.2.Q5_K_S](https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF).

> **A note on quantization:** That Q5_K_S bit on the model represents the quantization of the model. Without getting into too much detail, roughly this represents how compressed the model is. The more compressed the model is, the lower the file size and the less RAM it takes to run. But there is slight loss in performance. If you're running a MacBook, I would suggest running the Q5 or the Q6 version of the models.

Download the model somewhere on your hard drive and then we can set up the local Llama server to run against it.

<!-- livebook:{"attrs":"eyJpbl9iYWNrZ3JvdW5kIjpmYWxzZSwicmVzdGFydCI6ZmFsc2UsInNvdXJjZSI6IiMgL1VzZXJzL3Rob21hcy9jb2RlL2xsYW1hLmNwcC9zZXJ2ZXIgLW5wIDQgLWNiIC12IC1tIH4vRG93bmxvYWRzL21pc3RyYWwtN2ItaW5zdHJ1Y3QtdjAuMi5RNl9LLmdndWYifQ","chunks":null,"kind":"Elixir.KinoShell.ShellScriptCell","livebook_object":"smart_cell"} -->

```elixir
{_, 0} =
  System.cmd(
    "bash",
    [
      "-lc",
      "# /Users/thomas/code/llama.cpp/server -np 4 -cb -v -m ~/Downloads/mistral-7b-instruct-v0.2.Q6_K.gguf"
    ],
    into: IO.stream()
  )

:ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
defmodule President do
  use Ecto.Schema

  @primary_key false
  embedded_schema do
    field(:first_name, :string)
    field(:last_name, :string)
    field(:entered_office_date, :date)
  end
end

Instructor.chat_completion(
  response_model: President,
  messages: [
    %{role: "user", content: "Who was the first president of the United States?"}
  ]
)
```

<!-- livebook:{"output":true} -->

```
{:ok,
 %President{first_name: "George", last_name: "Washington", entered_office_date: ~D[1789-04-30]}}
```

And there you have it. You're running Instructor against a locally running large language model.  At zero incremental cost to you.
